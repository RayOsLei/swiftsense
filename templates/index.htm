<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta name="description" content="" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <!--[if lt IE 8]>
    <![endif]-->

    <script src="{{ url_for('static', filename='js/d3.v3.min.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/namespace.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/utils.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/models.js') }}" charset="utf-8"></script>
    <script src="{{ url_for('static', filename='js/views.js') }}" charset="utf-8"></script>

</head>
<body>
    <form action="" method="post" enctype="multipart/form-data">
        <input type="file" name="file" />
        <input type="submit" value="Upload" />
    </form>

    {% if data %}
    <svg width="100%" height="100%"></svg>

    <script type="text/javascript">
        var svg = d3.select('svg');

        var devs = {{ data.devs | tojson }};
        var replica2part2dev_id = {{ replica2part2dev_id | tojson }};
        var models = swiftsense.models.build_model(devs, replica2part2dev_id);
        var views = swiftsense.views.build_views(svg, models);

        // layout regions
        var region_ids = [];
        for (var k in views.regions) {
            region_ids.push(k);
        }
        region_ids.sort();

        var y_offset = 200 + 10;
        region_ids.forEach(function (d) {
            var region = views.regions[d];
            region.x = 160 * 2 + 40;
            region.y = y_offset
            region.update();
            y_offset += region.height + 10;
        });
        // resie the canvas
        svg.attr('height', Math.max(y_offset, 320));

        function draw_ring(x, y, data, inner, outer, colors) {
            var delta_angle = (Math.PI * 2) / data.length;
            var g = svg.selectAll('.arc')
                .data(data)
            .enter().append('g')
                .attr('transform', 'translate(' + x + ', ' + y + ')')
            ;
            g.append('path')
                .style('fill', function (d, i) {
                    return colors[d];
                })
                .attr('class', function (d) {
                    return 'ring-arc device-' + d;
                })
                .attr('d', function (d, i) {
                    return d3.svg.arc()
                        .innerRadius(inner)
                        .outerRadius(outer)
                        .startAngle(delta_angle * i)
                        .endAngle(delta_angle * (i + 1))()
                    ;
                })
            ;
            return g;
        }

        var colors = [];
        // get list of device IDs
        var devids = [];
        for (var devid in views.devices) {
            if (views.devices.hasOwnProperty(devid)) {
                devids.push(devid);
            }
        }
        var delta = 360.0 / devs.length;
        for (var i = 0; i < devs.length; ++i) {
            if (views.devices[devids[i]] !== undefined) {
                var color = d3.hsl(delta * i, 0.9, 0.5);
                colors.push(color);
                views.devices[devids[i]].label_color = color;
                views.devices[devids[i]].update();
            }
        }

        var radius_delta = 80 / replica2part2dev_id.length;
        replica2part2dev_id.forEach(function (d, i) {
            draw_ring(160, 160, d, 80 + i * radius_delta, 80 + (i + 1) * radius_delta, colors);
        });

        svg.selectAll('.device').on('mouseover', function (d) {
            svg.selectAll('.ring-arc')
                .style('fill', 'white')
            ;
            svg.selectAll('.device-' + d.device.id)
                .style('fill', colors[d.device.id])
            ;
            views.devices[d.device.id].rect
                .style('stroke', 'black')
                .style('stroke-width', 0)
            .transition()
                .duration(300)
                .style('stroke-width', 2)
            ;
        });
        svg.selectAll('.device').on('mouseout', function (d) {
            svg.selectAll('.ring-arc')
                .style('fill', function (id) { return colors[id]; })
            ;
            views.devices[d.device.id].rect
            .transition()
                .duration(300)
                .style('stroke-width', 0)
            ;
        });

        // draw balance bars
        // TODO: find a better way to orginze these code
        var dev_models = [];
        devs.forEach(function (d) {
            dev_models.push(models.devices[d.id]);
        });
        var draw_balanced_bar = function (x, y, width, height, padding) {
            if (typeof padding === 'undefined') {
                padding = 2;
            }
            var bar_width = width / dev_models.length;
            var max_parts = d3.max(dev_models, function(d) { return d.partition_placed });
            var max_normalized_parts = d3.max(dev_models, function(d) { return d.partition_placed / d.weight });
            var max_part_value = Math.max(max_parts, max_normalized_parts);
            var text_height = 20;

            var part_height = function (d) {
                return (d.partition_placed / max_part_value) * height - text_height;
            };
            var normalized_part_height = function (d) {
                return ((d.partition_placed / d.weight) / max_part_value) * height - text_height;
            };
            var bar_x = function (d, i) {
                return padding + (i * bar_width);
            };

            var balance_bar = svg.selectAll('.balance-bar')
                .data(dev_models)
              .enter().append('g')
                .attr('class', 'balance-bar')
                .attr('transform', function(d, i) { return 'translate(' + x + ',' + y + ')'; })
            ;
            // not normalized parts
            balance_bar.append('rect')
                .attr('x', bar_x)
                .attr('y', function (d) { return height - part_height(d) - padding - text_height; })
                .attr('width', bar_width - (padding * 2))
                .attr('height', function (d) { return part_height(d) - (padding * 2); })
                .style('fill', function (d) { return colors[d.id]; })
            ;
            // normalized parts
            balance_bar.append('rect')
                .attr('x', function(d, i) { return bar_x(d, i) + padding * 3; } )
                .attr('y', function (d) { return height - normalized_part_height(d) - padding - text_height; })
                .attr('width', bar_width - (padding * 8))
                .attr('height', function (d) { return normalized_part_height(d) - (padding * 2); })
                .style('fill', function (d) { return 'black'; })
                .style('fill-opacity', 0.2)
            ;
            balance_bar.append('text')
                .attr('dy', '.75em')
                .attr('y', height - text_height)
                .attr('x', function (d, i) { return bar_x(d, i) + bar_width / 2; } )
                .attr('text-anchor', 'middle')
                .text(function(d) { return d.id; })
            ;
            balance_bar.append('text')
                .attr('dy', '.75em')
                .attr('y', function (d) { return height - part_height(d) - text_height; })
                .attr('x', function (d, i) { return bar_x(d, i) + bar_width / 2; } )
                .attr('text-anchor', 'middle')
                .text(function(d) { return 'P: ' + d.partition_placed; })
            ;
            balance_bar.append('text')
                .attr('dy', '1.75em')
                .attr('y', function (d) { return height - part_height(d) - text_height; })
                .attr('x', function (d, i) { return bar_x(d, i) + bar_width / 2; } )
                .attr('text-anchor', 'middle')
                .text(function(d) { return 'W: ' + d.weight; })
            ;
        };
        draw_balanced_bar(160 * 2 + 40, 0, 400, 200);

    </script>
    {% endif %}

</body>
</html>